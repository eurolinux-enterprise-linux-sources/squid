Index: squid-3.1.10/src/HttpRequest.cc
===================================================================
--- squid-3.1.10/src/HttpRequest.cc
+++ squid-3.1.10/src/HttpRequest.cc
@@ -623,3 +623,18 @@ void HttpRequest::recordLookup(const Dns
             dnsWait = dns.wait;
     }
 }
+
+void
+HttpRequest::ignoreRange(const char *reason)
+{
+    if (range) {
+        debugs(73, 3, static_cast<void*>(range) << " for " << reason);
+        delete range;
+        range = NULL;
+    }
+    // Some callers also reset isRanged but it may not be safe for all callers:
+    // isRanged is used to determine whether a weak ETag comparison is allowed,
+    // and that check should not ignore the Range header if it was present.
+    // TODO: Some callers also delete HDR_RANGE, HDR_REQUEST_RANGE. Should we?
+}
+
Index: squid-3.1.10/src/HttpRequest.h
===================================================================
--- squid-3.1.10/src/HttpRequest.h
+++ squid-3.1.10/src/HttpRequest.h
@@ -129,6 +129,9 @@ public:
 
     char login[MAX_LOGIN_SZ];
 
+    /// forgets about the cached Range header (for a reason)
+    void ignoreRange(const char *reason);
+
 private:
     char host[SQUIDHOSTNAMELEN];
     int host_is_numeric;
Index: squid-3.1.10/src/client_side.cc
===================================================================
--- squid-3.1.10/src/client_side.cc
+++ squid-3.1.10/src/client_side.cc
@@ -1143,9 +1143,7 @@ ClientSocketContext::buildRangeHeader(Ht
          * offset data, but we won't be requesting it.
          * So, we can either re-request, or generate an error
          */
-        debugs(33, 3, "clientBuildRangeHeader: will not do ranges: " << range_err << ".");
-        delete http->request->range;
-        http->request->range = NULL;
+        http->request->ignoreRange(range_err);
     } else {
         /* XXX: TODO: Review, this unconditional set may be wrong. - TODO: review. */
         httpStatusLineSet(&rep->sline, rep->sline.version,
Index: squid-3.1.10/src/client_side_reply.cc
===================================================================
--- squid-3.1.10/src/client_side_reply.cc
+++ squid-3.1.10/src/client_side_reply.cc
@@ -109,6 +109,9 @@ clientReplyContext::setReplyToError(
 
     http->al.http.code = errstate->httpStatus;
 
+    if (http->request)
+        http->request->ignoreRange("responding with a Squid-generated error");
+
     createStoreEntry(method, request_flags());
 
     if (auth_user_request) {
Index: squid-3.1.10/src/client_side_request.cc
===================================================================
--- squid-3.1.10/src/client_side_request.cc
+++ squid-3.1.10/src/client_side_request.cc
@@ -856,8 +856,7 @@ clientInterpretRequestHeaders(ClientHttp
     else {
         req_hdr->delById(HDR_RANGE);
         req_hdr->delById(HDR_REQUEST_RANGE);
-        delete request->range;
-        request->range = NULL;
+        request->ignoreRange("neither HEAD nor GET");
     }
 
     if (req_hdr->has(HDR_AUTHORIZATION))
Index: squid-3.1.10/src/http.cc
===================================================================
--- squid-3.1.10/src/http.cc
+++ squid-3.1.10/src/http.cc
@@ -1529,8 +1529,7 @@ HttpStateData::httpBuildRequestHeader(Ht
         /* don't cache the result */
         orig_request->flags.cachable = 0;
         /* pretend it's not a range request */
-        delete orig_request->range;
-        orig_request->range = NULL;
+        orig_request->ignoreRange("want to request the whole object");
         orig_request->flags.range = 0;
     }
 
