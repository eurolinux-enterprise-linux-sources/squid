commit 7c67b3ac339cafd068de6a5cb71b37cf0b50166c
Author: Alex Rousskov <rousskov@measurement-factory.com>
Date:   Tue Mar 6 17:26:34 2012 -0700

    Bug 3420: Request body consumption races and theConsumer

diff --git a/src/BodyPipe.cc b/src/BodyPipe.cc
index bdbe3a3..3cdefe3 100644
--- a/src/BodyPipe.cc
+++ b/src/BodyPipe.cc
@@ -268,14 +268,28 @@ BodyPipe::clearConsumer()
 void
 BodyPipe::expectNoConsumption()
 {
-    Must(!theConsumer);
+    // We may be called multiple times because multiple jobs on the consumption
+    // chain may realize that there will be no more setConsumer() calls (e.g.,
+    // consuming code and retrying code). It is both difficult and not really
+    // necessary for them to coordinate their expectNoConsumption() calls.
+
+    // As a consequence, we may be called when we are auto-consuming already.
+
     if (!abortedConsumption && !exhausted()) {
+        // Before we abort, any regular consumption should be over and auto
+        // consumption must not be started.
+        Must(!theConsumer);
+
         AsyncCall::Pointer call= asyncCall(91, 7,
                                            "BodyProducer::noteBodyConsumerAborted",
                                            BodyProducerDialer(theProducer,
                                                               &BodyProducer::noteBodyConsumerAborted, this));
         ScheduleCallHere(call);
         abortedConsumption = true;
+
+        // in case somebody enabled auto-consumption before regular one aborted
+        if (mustAutoConsume)
+            startAutoConsumption();
     }
 }
 
